/* eslint-disable @next/next/no-img-element */
"use client";

import React, { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";

type CalendarDay = { prix: number | null; disponible: boolean };
type CalendarMap = Record<string, CalendarDay>;
type SortKey = "price" | "duration";
type ViewMode = "week" | "month";

type FlightRaw = any;
type Flight = {
  prix: number;
  compagnie?: string;
  escales?: number;
  um_ok?: boolean;
  animal_ok?: boolean;
  departISO?: string;
  arriveeISO?: string;
  departText?: string;
  arriveeText?: string;
  dureeMin?: number;
};

const fmtDate = (d: Date) => d.toISOString().slice(0, 10);
const pad2 = (n: number) => (n < 10 ? `0${n}` : `${n}`);
const toLocalHHMM = (iso?: string) => {
  if (!iso) return "—";
  const dt = new Date(iso);
  if (Number.isNaN(dt.getTime())) return "—";
  return `${pad2(dt.getHours())}:${pad2(dt.getMinutes())}`;
};
const parseISOorLocal = (v?: string) => {
  if (!v) return undefined;
  const d = new Date(v);
  if (!Number.isNaN(d.getTime())) return d;
  if (/^\d{2}:\d{2}$/.test(v)) {
    const now = new Date();
    const [h, m] = v.split(":").map(Number);
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), h, m, 0, 0);
  }
  return undefined;
};
const parsePTdur = (pt?: string) => {
  if (!pt || typeof pt !== "string" || !pt.startsWith("PT")) return undefined;
  let h = 0, m = 0;
  const hm = pt.slice(2);
  const hMatch = hm.match(/(\d+)H/);
  const mMatch = hm.match(/(\d+)M/);
  if (hMatch) h = parseInt(hMatch[1], 10);
  if (mMatch) m = parseInt(mMatch[1], 10);
  return h * 60 + m;
};
const minutesDiff = (a?: Date, b?: Date) => {
  if (!a || !b) return undefined;
  return Math.max(1, Math.round((b.getTime() - a.getTime()) / 60000));
};
const monthKey = (d: Date) => `${d.getFullYear()}-${pad2(d.getMonth() + 1)}`;
const firstDayOfMonth = (d: Date) => new Date(d.getFullYear(), d.getMonth(), 1);
const lastDayOfMonth = (d: Date) => new Date(d.getFullYear(), d.getMonth() + 1, 0);

const weekLetters = ["L","M","M2","J","V","S","D"];
const weekLabels  = ["L","M","M","J","V","S","D"];

function normalizeFlight(r: FlightRaw): Flight {
  const price = typeof r?.prix === "number" ? r.prix : Number(r?.prix ?? NaN);
  const depISO = r?.depart_iso ?? r?.departISO ?? r?.heure_depart ?? r?.vols?.[0]?.depart_iso ?? r?.vols?.[0]?.departISO;
  const arrISO = r?.arrivee_iso ?? r?.arriveeISO ?? r?.heure_arrivee ?? r?.vols?.[r?.vols?.length-1]?.arrivee_iso ?? r?.vols?.[r?.vols?.length-1]?.arriveeISO;
  const dep = parseISOorLocal(depISO);
  const arr = parseISOorLocal(arrISO);
  const dureeMin = (typeof r?.duree_minutes === "number" ? r.duree_minutes : parsePTdur(r?.duree)) ?? minutesDiff(dep, arr);
  const compagnie = r?.compagnie ?? (Array.isArray(r?.compagnies) && r.compagnies.length ? r.compagnies.join("/") : undefined);
  return {
    prix: Number.isFinite(price) ? Math.round(price) : 0,
    compagnie,
    escales: typeof r?.escales === "number" ? r.escales : Array.isArray(r?.vols) ? Math.max(0, r.vols.length - 1) : undefined,
    um_ok: !!r?.um_ok,
    animal_ok: !!r?.animal_ok,
    departISO: dep ? dep.toISOString() : undefined,
    arriveeISO: arr ? arr.toISOString() : undefined,
    departText: dep ? toLocalHHMM(dep.toISOString()) : "—",
    arriveeText: arr ? toLocalHHMM(arr.toISOString()) : "—",
    dureeMin: dureeMin ?? undefined,
  };
}

export default function SearchPage() {
  const router = useRouter();
  const params = useSearchParams();

  const [origin, setOrigin] = useState(params.get("origin") || "PAR");
  const [destination, setDestination] = useState(params.get("destination") || "BCN");
  const [dateStr, setDateStr] = useState(params.get("date") || fmtDate(new Date()));
  const [sort, setSort] = useState<SortKey>((params.get("sort") as SortKey) || "price");
  const [view, setView] = useState<ViewMode>((params.get("view") as ViewMode) || "week");
  const [direct, setDirect] = useState(params.get("direct") === "1");
  const [um, setUm] = useState(params.get("um") === "1");
  const [pets, setPets] = useState(params.get("pets") === "1");

  const [calendar, setCalendar] = useState<CalendarMap>({});
  const [results, setResults] = useState<Flight[]>([]);
  const [loadingCal, setLoadingCal] = useState(false);
  const [loadingRes, setLoadingRes] = useState(false);

  const [showMini, setShowMini] = useState(false);
  const miniRef = useRef<HTMLDivElement | null>(null);
  const dateInputRef = useRef<HTMLInputElement | null>(null);

  const [monthCursor, setMonthCursor] = useState(() => {
    const d = new Date(dateStr);
    return isNaN(d.getTime()) ? new Date() : d;
  });

  // Close mini on outside click
  useEffect(() => {
    function onDoc(e: MouseEvent) {
      if (
        showMini &&
        miniRef.current &&
        !miniRef.current.contains(e.target as Node) &&
        dateInputRef.current &&
        !dateInputRef.current.contains(e.target as Node)
      ) {
        setShowMini(false);
      }
    }
    document.addEventListener("mousedown", onDoc);
    return () => document.removeEventListener("mousedown", onDoc);
  }, [showMini]);

  // URL partageable
  const currentShareURL = useMemo(() => {
    const p = new URLSearchParams();
    p.set("origin", origin);
    p.set("destination", destination);
    p.set("date", dateStr);
    p.set("sort", sort);
    p.set("view", view);
    p.set("direct", direct ? "1" : "0");
    p.set("um", um ? "1" : "0");
    p.set("pets", pets ? "1" : "0");
    return `/search?${p.toString()}`;
  }, [origin, destination, dateStr, sort, view, direct, um, pets]);

  // Remonte l’URL (sans rechargement)
  useEffect(() => {
    router.replace(currentShareURL);
  }, [router, currentShareURL]);

  // Chargement calendrier (uniquement quand le mois ou filtres changent)
  const loadCalendar = useCallback(async (cursor: Date, o: string, d: string, directB: boolean, umB: boolean, petsB: boolean) => {
    setLoadingCal(true);
    try {
      const m = `${cursor.getFullYear()}-${pad2(cursor.getMonth() + 1)}`;
      const url = `/api/calendar?origin=${encodeURIComponent(o)}&destination=${encodeURIComponent(d)}&month=${m}&direct=${directB ? 1 : 0}&um=${umB ? 1 : 0}&pets=${petsB ? 1 : 0}`;
      const r = await fetch(url, { cache: "no-store" });
      if (!r.ok) throw new Error("calendar upstream");
      const data = await r.json();
      setCalendar(data.calendar || {});
    } catch {
      setCalendar({});
    } finally {
      setLoadingCal(false);
    }
  }, []);

  // Chargement résultats jour
  const loadResults = useCallback(async (o: string, d: string, day: string, directB: boolean, umB: boolean, petsB: boolean, s: SortKey) => {
    setLoadingRes(true);
    try {
      const url = `/api/search?origin=${encodeURIComponent(o)}&destination=${encodeURIComponent(d)}&date=${day}&direct=${directB ? 1 : 0}&um=${umB ? 1 : 0}&pets=${petsB ? 1 : 0}`;
      const r = await fetch(url, { cache: "no-store" });
      if (!r.ok) throw new Error("search upstream");
      const raw = await r.json();
      let list: Flight[] = Array.isArray(raw?.results) ? raw.results.map(normalizeFlight) : [];
      // tri
      list.sort((a, b) => s === "price" ? a.prix - b.prix : (a.dureeMin ?? 9e9) - (b.dureeMin ?? 9e9));
      setResults(list);
    } catch {
      setResults([]);
    } finally {
      setLoadingRes(false);
    }
  }, []);

  // Effet calendrier : dépendances figées (mois+filtres+OD)
  useEffect(() => {
    loadCalendar(monthCursor, origin, destination, direct, um, pets);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [monthCursor.getFullYear(), monthCursor.getMonth(), origin, destination, direct, um, pets]);

  // Effet résultats : jour + filtres/tri
  useEffect(() => {
    loadResults(origin, destination, dateStr, direct, um, pets, sort);
  }, [origin, destination, dateStr, direct, um, pets, sort, loadResults]);

  // Submit manuel
  const onSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Recalcule le calendrier du mois courant avec filtres actuels
    loadCalendar(monthCursor, origin, destination, direct, um, pets);
    loadResults(origin, destination, dateStr, direct, um, pets, sort);
  };

  const selectDay = (d: Date) => {
    const s = fmtDate(d);
    setDateStr(s);
    // si changement de mois => déclenche loadCalendar via useEffect
    if (d.getFullYear() !== monthCursor.getFullYear() || d.getMonth() !== monthCursor.getMonth()) {
      setMonthCursor(d);
    }
  };

  const goPrevMonth = () => {
    const d = new Date(monthCursor);
    d.setMonth(d.getMonth() - 1, 1);
    setMonthCursor(d);
  };
  const goNextMonth = () => {
    const d = new Date(monthCursor);
    d.setMonth(d.getMonth() + 1, 1);
    setMonthCursor(d);
  };

  const weekDays = useMemo(() => {
    const base = new Date(dateStr);
    if (isNaN(base.getTime())) return [] as Date[];
    const js = (base.getDay() + 6) % 7;
    const monday = new Date(base);
    monday.setDate(base.getDate() - js);
    return Array.from({ length: 7 }, (_, i) => {
      const d = new Date(monday);
      d.setDate(monday.getDate() + i);
      return d;
    });
  }, [dateStr]);

  const monthDays = useMemo(() => {
    const first = firstDayOfMonth(monthCursor);
    const last = lastDayOfMonth(monthCursor);
    const startCol = (first.getDay() + 6) % 7;
    const days: (Date | null)[] = [];
    for (let i = 0; i < startCol; i++) days.push(null);
    for (let d = 1; d <= last.getDate(); d++) {
      days.push(new Date(monthCursor.getFullYear(), monthCursor.getMonth(), d));
    }
    return days;
  }, [monthCursor]);

  // Couleurs prix
  const calStats = useMemo(() => {
    const values = Object.values(calendar).map((d) => d.prix).filter((x): x is number => typeof x === "number");
    const min = values.length ? Math.min(...values) : 0;
    const max = values.length ? Math.max(...values) : 0;
    return { min, max };
  }, [calendar]);
  const classify = (value: number | null) => {
    if (value == null) return "empty";
    const { min, max } = calStats;
    if (max === min) return "low";
    const t = (value - min) / (max - min);
    if (t <= 0.33) return "low";
    if (t <= 0.66) return "mid";
    return "high";
  };

  const DayTile: React.FC<{ d: Date; compact?: boolean }> = ({ d, compact }) => {
    const key = fmtDate(d);
    const info = calendar[key];
    const selected = key === dateStr;
    const cls =
      info?.prix == null
        ? "bg-gray-100 border-gray-300 text-gray-400"
        : classify(info.prix) === "low"
        ? "bg-green-100 border-green-300"
        : classify(info.prix) === "mid"
        ? "bg-yellow-100 border-yellow-300"
        : "bg-rose-100 border-rose-300";
    return (
      <button
        onClick={() => selectDay(d)}
        className={`rounded border ${selected ? "ring-2 ring-blue-400" : ""} px-2 py-2 hover:shadow transition`}
        title={key}
      >
        <div className={`mb-1 text-sm ${selected ? "font-semibold" : ""}`}>{d.getDate()}</div>
        <div className={`rounded border ${cls} ${compact ? "px-3 py-3 text-base" : "px-6 py-6 text-xl"} text-center font-medium`}>
          {info?.prix == null ? "—" : `${info.prix} €`}
        </div>
      </button>
    );
  };

  const WeekView = () => (
    <div className="mt-4">
      <div className="mb-2 grid grid-cols-7 gap-3 text-center text-xs text-gray-500">
        {weekLabels.map((w, i) => (<div key={weekLetters[i]}>{w}</div>))}
      </div>
      <div className="grid grid-cols-7 gap-3">
        {weekDays.map((d) => (<DayTile key={fmtDate(d)} d={d} />))}
      </div>
    </div>
  );

  const MonthView = () => (
    <div className="mt-4">
      <div className="mb-3 flex items-center gap-2">
        <button type="button" onClick={goPrevMonth} className="rounded border px-2 py-1">◀</button>
        <div className="min-w-[180px] text-center font-medium">
          {monthCursor.toLocaleDateString("fr-FR", { month: "long", year: "numeric" })}
        </div>
        <button type="button" onClick={goNextMonth} className="rounded border px-2 py-1">▶</button>
      </div>
      <div className="mb-2 grid grid-cols-7 gap-2 text-center text-xs text-gray-500">
        {weekLabels.map((w, i) => (<div key={`m-${weekLetters[i]}`}>{w}</div>))}
      </div>
      <div className="grid grid-cols-7 gap-2">
        {monthDays.map((d, i) =>
          d ? <DayTile key={fmtDate(d)} d={d} compact /> :
              <div key={`empty-${i}`} className="rounded border px-2 py-2 opacity-30">&nbsp;</div>
        )}
      </div>
    </div>
  );

  const MiniCalendar: React.FC = () => {
    if (!showMini) return null;
    const style: React.CSSProperties = { position: "absolute", zIndex: 50, marginTop: 6, width: 320 };
    return (
      <div ref={miniRef} style={style} className="rounded-lg border bg-white p-3 shadow">
        <div className="mb-2 flex items-center justify-between">
          <button onClick={goPrevMonth} className="rounded border px-2 py-1">◀</button>
          <div className="text-sm font-medium">
            {monthCursor.toLocaleDateString("fr-FR", { month: "long", year: "numeric" })}
          </div>
          <button onClick={goNextMonth} className="rounded border px-2 py-1">▶</button>
        </div>
        <div className="mb-1 grid grid-cols-7 gap-1 text-center text-[11px] text-gray-500">
          {weekLabels.map((w, i) => (<div key={`mini-${weekLetters[i]}`}>{w}</div>))}
        </div>
        <div className="grid grid-cols-7 gap-1">
          {monthDays.map((d, i) =>
            d ? (
              <button
                key={`mini-${fmtDate(d)}`}
                onClick={() => { selectDay(d); setShowMini(false); }}
                className={`rounded px-1 py-1 text-left ${fmtDate(d) === dateStr ? "ring-2 ring-blue-400" : ""}`}
                title={fmtDate(d)}
              >
                <div className="text-[11px]">{d.getDate()}</div>
                {/* pastille couleur seule */}
                <div className="mt-1 h-2 w-full rounded">
                  {(() => {
                    const info = calendar[fmtDate(d)];
                    const cls =
                      info?.prix == null
                        ? "bg-gray-300"
                        : classify(info.prix) === "low" ? "bg-green-300"
                        : classify(info.prix) === "mid" ? "bg-yellow-300"
                        : "bg-rose-300";
                    return <div className={`h-2 w-full rounded ${cls}`} />;
                  })()}
                </div>
              </button>
            ) : (
              <div key={`mini-empty-${i}`} />
            )
          )}
        </div>
      </div>
    );
  };

  const Timeline: React.FC = () => {
    const start = new Date(dateStr);
    const dayStart = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 0, 0, 0, 0).getTime();
    const dayEnd = dayStart + 24 * 3600 * 1000;
    const bars = results.map((r) => {
      const dep = parseISOorLocal(r.departISO || "");
      const arr = parseISOorLocal(r.arriveeISO || "");
      const s = dep ? dep.getTime() : dayStart + 8 * 3600 * 1000;
      const e = arr ? arr.getTime() : s + (r.dureeMin ?? 120) * 60000;
      const clampedS = Math.max(dayStart, Math.min(s, dayEnd));
      const clampedE = Math.max(dayStart + 10 * 60 * 1000, Math.min(e, dayEnd));
      const left = ((clampedS - dayStart) / (dayEnd - dayStart)) * 100;
      const width = ((clampedE - clampedS) / (dayEnd - dayStart)) * 100;
      return { left, width };
    }).filter((b) => isFinite(b.left) && isFinite(b.width));
    return (
      <div className="mt-6">
        <div className="mb-1 text-xs text-gray-500">Timeline (départ → arrivée sur 24 h)</div>
        <div className="relative h-6 w-full rounded border bg-gray-50">
          {bars.map((b, i) => (
            <div key={i} className="absolute top-0 h-full rounded bg-blue-300/80" style={{ left: `${b.left}%`, width: `${Math.max(b.width, 2)}%` }} />
          ))}
        </div>
        <div className="mt-1 flex justify-between text-[10px] text-gray-500">
          <span>00:00</span><span>06:00</span><span>12:00</span><span>18:00</span><span>24:00</span>
        </div>
      </div>
    );
  };

  const doShare = async () => {
    const base = typeof window !== "undefined" && window.location ? window.location.origin : "";
    const url = `${base}${currentShareURL}`;
    try {
      // @ts-ignore
      if (typeof navigator !== "undefined" && navigator.share) {
        // @ts-ignore
        await navigator.share({ title: "Comparateur — vols", text: "Résultats de recherche", url });
      } else {
        const nav: any = navigator as any;
        if (nav?.clipboard?.writeText) {
          await nav.clipboard.writeText(url);
          alert("Lien copié dans le presse-papiers !");
        } else {
          window.history.replaceState(null, "", currentShareURL);
          alert("Lien prêt dans la barre d’adresse (copie manuelle).");
        }
      }
    } catch {
      window.history.replaceState(null, "", currentShareURL);
      alert("Lien prêt dans la barre d’adresse (copie manuelle).");
    }
  };

  const ResultsList = () => (
    <div className="mt-4 space-y-3">
      {loadingRes ? (
        <div className="py-8 text-center text-sm text-gray-500">Recherche…</div>
      ) : results.length === 0 ? (
        <div className="py-8 text-center text-sm text-gray-500">Aucun résultat pour cette date.</div>
      ) : (
        results.map((r, i) => (
          <div key={i} className="rounded border p-3">
            <div className="flex items-center justify-between">
              <div className="text-lg font-semibold">{Math.round(r.prix)} €</div>
              <div className="text-sm text-gray-600">{r.compagnie || "—"}</div>
            </div>
            <div className="mt-1 text-sm text-gray-700">
              {r.departText} → {r.arriveeText} · {r.dureeMin ? `${Math.floor(r.dureeMin / 60)} h ${r.dureeMin % 60} min` : "—"} · {typeof r.escales === "number" ? `${r.escales} escale(s)` : "—"}
            </div>
            <div className="mt-2 flex items-center gap-2 text-xs">
              <span className="rounded-full border px-2 py-0.5">Direct</span>
              <span className="rounded-full border px-2 py-0.5">🧒 UM</span>
              <span className="rounded-full border px-2 py-0.5">🐾 Animaux</span>
            </div>
          </div>
        ))
      )}
    </div>
  );

  return (
    <main className="mx-auto max-w-5xl p-4">
      <h1 className="mb-4 text-2xl font-semibold">Comparateur — vols</h1>

      <form onSubmit={onSubmit} className="grid grid-cols-1 gap-3 md:grid-cols-7">
        <div>
          <label className="mb-1 block text-sm text-gray-600">Origine</label>
          <input className="w-full rounded border px-3 py-2" value={origin} onChange={(e) => setOrigin(e.target.value.toUpperCase())} placeholder="PAR" />
        </div>
        <div>
          <label className="mb-1 block text-sm text-gray-600">Destination</label>
          <input className="w-full rounded border px-3 py-2" value={destination} onChange={(e) => setDestination(e.target.value.toUpperCase())} placeholder="BCN" />
        </div>
        <div className="relative md:col-span-2">
          <label className="mb-1 block text-sm text-gray-600">Date</label>
          <input
            ref={dateInputRef}
            type="date"
            className="w-full rounded border px-3 py-2"
            value={dateStr}
            onChange={(e) => {
              const v = e.target.value;
              setDateStr(v);
              const d = new Date(v);
              if (!isNaN(d.getTime())) setMonthCursor(d);
            }}
            onFocus={() => setShowMini(true)}
          />
          <MiniCalendar />
        </div>
        <div>
          <label className="mb-1 block text-sm text-gray-600">Tri</label>
          <select className="w-full rounded border px-3 py-2" value={sort} onChange={(e) => setSort(e.target.value as SortKey)}>
            <option value="price">Prix croissant</option>
            <option value="duration">Durée croissante</option>
          </select>
        </div>
        <div className="flex items-end gap-3">
          <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={direct} onChange={(e) => setDirect(e.target.checked)} />Direct</label>
          <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={um} onChange={(e) => setUm(e.target.checked)} />UM</label>
          <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={pets} onChange={(e) => setPets(e.target.checked)} />Animaux</label>
        </div>
        <div className="flex items-end justify-end">
          <button type="submit" className="rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">Rechercher</button>
        </div>
      </form>

      <div className="mt-3 flex flex-wrap items-center gap-3">
        <div className="flex items-center gap-3 text-sm">
          <span className="inline-flex items-center gap-1"><span className="inline-block h-3 w-3 rounded bg-green-200 ring-1 ring-green-400" />pas cher</span>
          <span className="inline-flex items-center gap-1"><span className="inline-block h-3 w-3 rounded bg-yellow-200 ring-1 ring-yellow-400" />moyen</span>
          <span className="inline-flex items-center gap-1"><span className="inline-block h-3 w-3 rounded bg-rose-200 ring-1 ring-rose-400" />cher</span>
        </div>
        <div className="ml-auto flex items-center gap-2">
          <div className="rounded border">
            <button className={`px-3 py-1 ${view === "week" ? "bg-black text-white" : ""}`} onClick={() => setView("week")} type="button">Semaine</button>
            <button className={`px-3 py-1 ${view === "month" ? "bg-black text-white" : ""}`} onClick={() => setView("month")} type="button">Mois</button>
          </div>
          <button onClick={doShare} type="button" className="rounded border px-3 py-1" title="Partager">🔗 Partager</button>
        </div>
      </div>

      {loadingCal ? (
        <div className="py-8 text-center text-sm text-gray-500">Chargement du calendrier…</div>
      ) : view === "week" ? <WeekView /> : <MonthView />}

      <Timeline />
      <ResultsList />

      <div className="mt-8 text-xs text-gray-500">
        <a className="underline" href="/api/ping">API ping</a>
      </div>
    </main>
  );
}